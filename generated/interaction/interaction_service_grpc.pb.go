// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: interaction/interaction_service.proto

package interaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InteractionService_PostInteraction_FullMethodName          = "/interaction.InteractionService/PostInteraction"
	InteractionService_GetRecommendBaseUser_FullMethodName     = "/interaction.InteractionService/GetRecommendBaseUser"
	InteractionService_GetRecommendBaseCreation_FullMethodName = "/interaction.InteractionService/GetRecommendBaseCreation"
	InteractionService_GetActionTag_FullMethodName             = "/interaction.InteractionService/GetActionTag"
	InteractionService_GetHistories_FullMethodName             = "/interaction.InteractionService/GetHistories"
	InteractionService_GetCollections_FullMethodName           = "/interaction.InteractionService/GetCollections"
	InteractionService_ClickCollection_FullMethodName          = "/interaction.InteractionService/ClickCollection"
	InteractionService_ClickLike_FullMethodName                = "/interaction.InteractionService/ClickLike"
	InteractionService_CancelCollections_FullMethodName        = "/interaction.InteractionService/CancelCollections"
	InteractionService_DelHistories_FullMethodName             = "/interaction.InteractionService/DelHistories"
	InteractionService_CancelLike_FullMethodName               = "/interaction.InteractionService/CancelLike"
)

// InteractionServiceClient is the client API for InteractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractionServiceClient interface {
	// POST
	// 这个为展示完视频信息之后再查看是否登录，判断是否发送事件
	PostInteraction(ctx context.Context, in *PostInteractionRequest, opts ...grpc.CallOption) (*PostInteractionResponse, error)
	// Get
	GetRecommendBaseUser(ctx context.Context, in *GetRecommendRequest, opts ...grpc.CallOption) (*GetRecommendResponse, error)
	GetRecommendBaseCreation(ctx context.Context, in *GetRecommendRequest, opts ...grpc.CallOption) (*GetRecommendResponse, error)
	// 这个为展示完视频信息之后再查看是否登录，再盘点是否已经点赞过
	GetActionTag(ctx context.Context, in *GetCreationInteractionRequest, opts ...grpc.CallOption) (*GetCreationInteractionResponse, error)
	GetHistories(ctx context.Context, in *GetHistoriesRequest, opts ...grpc.CallOption) (*GetInteractionsResponse, error)
	GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetInteractionsResponse, error)
	ClickCollection(ctx context.Context, in *UpdateInteractionRequest, opts ...grpc.CallOption) (*UpdateInteractionResponse, error)
	ClickLike(ctx context.Context, in *UpdateInteractionRequest, opts ...grpc.CallOption) (*UpdateInteractionResponse, error)
	CancelCollections(ctx context.Context, in *UpdateInteractionsRequest, opts ...grpc.CallOption) (*UpdateInteractionResponse, error)
	DelHistories(ctx context.Context, in *UpdateInteractionsRequest, opts ...grpc.CallOption) (*UpdateInteractionResponse, error)
	CancelLike(ctx context.Context, in *UpdateInteractionRequest, opts ...grpc.CallOption) (*UpdateInteractionResponse, error)
}

type interactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionServiceClient(cc grpc.ClientConnInterface) InteractionServiceClient {
	return &interactionServiceClient{cc}
}

func (c *interactionServiceClient) PostInteraction(ctx context.Context, in *PostInteractionRequest, opts ...grpc.CallOption) (*PostInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_PostInteraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetRecommendBaseUser(ctx context.Context, in *GetRecommendRequest, opts ...grpc.CallOption) (*GetRecommendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetRecommendBaseUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetRecommendBaseCreation(ctx context.Context, in *GetRecommendRequest, opts ...grpc.CallOption) (*GetRecommendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetRecommendBaseCreation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetActionTag(ctx context.Context, in *GetCreationInteractionRequest, opts ...grpc.CallOption) (*GetCreationInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreationInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetActionTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetHistories(ctx context.Context, in *GetHistoriesRequest, opts ...grpc.CallOption) (*GetInteractionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInteractionsResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetHistories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetInteractionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInteractionsResponse)
	err := c.cc.Invoke(ctx, InteractionService_GetCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) ClickCollection(ctx context.Context, in *UpdateInteractionRequest, opts ...grpc.CallOption) (*UpdateInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_ClickCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) ClickLike(ctx context.Context, in *UpdateInteractionRequest, opts ...grpc.CallOption) (*UpdateInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_ClickLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) CancelCollections(ctx context.Context, in *UpdateInteractionsRequest, opts ...grpc.CallOption) (*UpdateInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_CancelCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) DelHistories(ctx context.Context, in *UpdateInteractionsRequest, opts ...grpc.CallOption) (*UpdateInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_DelHistories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) CancelLike(ctx context.Context, in *UpdateInteractionRequest, opts ...grpc.CallOption) (*UpdateInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInteractionResponse)
	err := c.cc.Invoke(ctx, InteractionService_CancelLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionServiceServer is the server API for InteractionService service.
// All implementations must embed UnimplementedInteractionServiceServer
// for forward compatibility.
type InteractionServiceServer interface {
	// POST
	// 这个为展示完视频信息之后再查看是否登录，判断是否发送事件
	PostInteraction(context.Context, *PostInteractionRequest) (*PostInteractionResponse, error)
	// Get
	GetRecommendBaseUser(context.Context, *GetRecommendRequest) (*GetRecommendResponse, error)
	GetRecommendBaseCreation(context.Context, *GetRecommendRequest) (*GetRecommendResponse, error)
	// 这个为展示完视频信息之后再查看是否登录，再盘点是否已经点赞过
	GetActionTag(context.Context, *GetCreationInteractionRequest) (*GetCreationInteractionResponse, error)
	GetHistories(context.Context, *GetHistoriesRequest) (*GetInteractionsResponse, error)
	GetCollections(context.Context, *GetCollectionsRequest) (*GetInteractionsResponse, error)
	ClickCollection(context.Context, *UpdateInteractionRequest) (*UpdateInteractionResponse, error)
	ClickLike(context.Context, *UpdateInteractionRequest) (*UpdateInteractionResponse, error)
	CancelCollections(context.Context, *UpdateInteractionsRequest) (*UpdateInteractionResponse, error)
	DelHistories(context.Context, *UpdateInteractionsRequest) (*UpdateInteractionResponse, error)
	CancelLike(context.Context, *UpdateInteractionRequest) (*UpdateInteractionResponse, error)
	mustEmbedUnimplementedInteractionServiceServer()
}

// UnimplementedInteractionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInteractionServiceServer struct{}

func (UnimplementedInteractionServiceServer) PostInteraction(context.Context, *PostInteractionRequest) (*PostInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostInteraction not implemented")
}
func (UnimplementedInteractionServiceServer) GetRecommendBaseUser(context.Context, *GetRecommendRequest) (*GetRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendBaseUser not implemented")
}
func (UnimplementedInteractionServiceServer) GetRecommendBaseCreation(context.Context, *GetRecommendRequest) (*GetRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendBaseCreation not implemented")
}
func (UnimplementedInteractionServiceServer) GetActionTag(context.Context, *GetCreationInteractionRequest) (*GetCreationInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionTag not implemented")
}
func (UnimplementedInteractionServiceServer) GetHistories(context.Context, *GetHistoriesRequest) (*GetInteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistories not implemented")
}
func (UnimplementedInteractionServiceServer) GetCollections(context.Context, *GetCollectionsRequest) (*GetInteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedInteractionServiceServer) ClickCollection(context.Context, *UpdateInteractionRequest) (*UpdateInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickCollection not implemented")
}
func (UnimplementedInteractionServiceServer) ClickLike(context.Context, *UpdateInteractionRequest) (*UpdateInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickLike not implemented")
}
func (UnimplementedInteractionServiceServer) CancelCollections(context.Context, *UpdateInteractionsRequest) (*UpdateInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCollections not implemented")
}
func (UnimplementedInteractionServiceServer) DelHistories(context.Context, *UpdateInteractionsRequest) (*UpdateInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelHistories not implemented")
}
func (UnimplementedInteractionServiceServer) CancelLike(context.Context, *UpdateInteractionRequest) (*UpdateInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLike not implemented")
}
func (UnimplementedInteractionServiceServer) mustEmbedUnimplementedInteractionServiceServer() {}
func (UnimplementedInteractionServiceServer) testEmbeddedByValue()                            {}

// UnsafeInteractionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionServiceServer will
// result in compilation errors.
type UnsafeInteractionServiceServer interface {
	mustEmbedUnimplementedInteractionServiceServer()
}

func RegisterInteractionServiceServer(s grpc.ServiceRegistrar, srv InteractionServiceServer) {
	// If the following call pancis, it indicates UnimplementedInteractionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InteractionService_ServiceDesc, srv)
}

func _InteractionService_PostInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).PostInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_PostInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).PostInteraction(ctx, req.(*PostInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetRecommendBaseUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetRecommendBaseUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetRecommendBaseUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetRecommendBaseUser(ctx, req.(*GetRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetRecommendBaseCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetRecommendBaseCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetRecommendBaseCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetRecommendBaseCreation(ctx, req.(*GetRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetActionTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreationInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetActionTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetActionTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetActionTag(ctx, req.(*GetCreationInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetHistories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetHistories(ctx, req.(*GetHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetCollections(ctx, req.(*GetCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_ClickCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).ClickCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_ClickCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).ClickCollection(ctx, req.(*UpdateInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_ClickLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).ClickLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_ClickLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).ClickLike(ctx, req.(*UpdateInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_CancelCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).CancelCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_CancelCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).CancelCollections(ctx, req.(*UpdateInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_DelHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).DelHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_DelHistories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).DelHistories(ctx, req.(*UpdateInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_CancelLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).CancelLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_CancelLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).CancelLike(ctx, req.(*UpdateInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractionService_ServiceDesc is the grpc.ServiceDesc for InteractionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaction.InteractionService",
	HandlerType: (*InteractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostInteraction",
			Handler:    _InteractionService_PostInteraction_Handler,
		},
		{
			MethodName: "GetRecommendBaseUser",
			Handler:    _InteractionService_GetRecommendBaseUser_Handler,
		},
		{
			MethodName: "GetRecommendBaseCreation",
			Handler:    _InteractionService_GetRecommendBaseCreation_Handler,
		},
		{
			MethodName: "GetActionTag",
			Handler:    _InteractionService_GetActionTag_Handler,
		},
		{
			MethodName: "GetHistories",
			Handler:    _InteractionService_GetHistories_Handler,
		},
		{
			MethodName: "GetCollections",
			Handler:    _InteractionService_GetCollections_Handler,
		},
		{
			MethodName: "ClickCollection",
			Handler:    _InteractionService_ClickCollection_Handler,
		},
		{
			MethodName: "ClickLike",
			Handler:    _InteractionService_ClickLike_Handler,
		},
		{
			MethodName: "CancelCollections",
			Handler:    _InteractionService_CancelCollections_Handler,
		},
		{
			MethodName: "DelHistories",
			Handler:    _InteractionService_DelHistories_Handler,
		},
		{
			MethodName: "CancelLike",
			Handler:    _InteractionService_CancelLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaction/interaction_service.proto",
}

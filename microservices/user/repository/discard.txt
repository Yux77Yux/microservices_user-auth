func UserGetInfoInTransaction(ctx context.Context, id int64, fields []string) (map[string]interface{}, error) {
	var query string
	if len(fields) > 0 {
		// 查询指定字段
		query = fmt.Sprintf("SELECT %s FROM db_user_1.User WHERE id = ?", strings.Join(fields, ", "))
	} else {
		// 查询全部字段
		query = "SELECT * FROM db_user_1.User WHERE id = ?"
	}

	var result map[string]interface{}
	select {
	case <-ctx.Done():
		return nil, ctx.Err()
	default:
		rows, err := db.QueryContext(ctx, query, id)
		if err != nil {
			return nil, err
		}
		defer rows.Close()

		// 获取列名
		cols, err := rows.Columns()
		if err != nil {
			err = fmt.Errorf("failed to get columns: %v", err)
			return nil, err
		}

		// 确保有结果,无结果直接返回
		if !rows.Next() {
			return nil, nil
		}

		// 创建一个存储列值的切片
		values := make([]interface{}, len(cols))
		pointers := make([]interface{}, len(cols))
		for i := range values {
			pointers[i] = &values[i]
		}

		// 扫描结果到指针数组
		if err := rows.Scan(pointers...); err != nil {
			return nil, err
		}

		// 将结果填充到 map 中
		result = make(map[string]interface{})
		for i, colName := range cols {
			switch colName {
			case "id":
				result[colName] = id
			case "bday":
				if values[i] == nil {
					result[colName] = "none"
				} else {
					if value, ok := values[i].([]byte); ok {
						// 将字符串解析为 time.Time（假设格式是 "YYYY-MM-DD"）
						parsedTime, err := time.Parse("2006-01-02", string(value))
						if err != nil {
							return nil, err
						}

						result[colName] = timestamppb.New(parsedTime)
					} else {
						return nil, err
					}
				}
			case "created_at", "updated_at":
				if value, ok := values[i].([]byte); ok {
					// 将字符串解析为 time.Time（假设格式是 "YYYY-MM-DD HH:MM:SS"）
					parsedTime, err := time.Parse("2006-01-02 15:04:05", string(value))
					if err != nil {
						return nil, err
					}

					result[colName] = timestamppb.New(parsedTime)
				} else {
					return nil, err
				}
			default:
				if value, ok := values[i].([]byte); ok {
					result[colName] = string(value)
				} else {
					return nil, err
				}
			}
		}

		// 再查UserCredentials拿身份和邮箱
		var (
			email interface{}
			role  string
		)
		query = "SELECT email,role FROM db_user_credentials_1.UserCredentials WHERE id = ?"
		if err := db.QueryRow(query, id).Scan(&email, &role); err != nil {
			return nil, err
		}

		log.Printf("email %v", email)
		if email == nil {
			result["email"] = ""
		} else {
			if value, ok := email.([]byte); ok {
				result["email"] = string(value)
			} else {
				err = fmt.Errorf("assert email type failed ")
				return nil, err
			}
		}
		result["role"] = role
	}
	return result, nil
}